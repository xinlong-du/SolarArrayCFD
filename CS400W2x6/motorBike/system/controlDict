/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     simpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         500;

deltaT          1;

writeControl    timeStep;

writeInterval   500;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    #include "streamlines"
    #include "cuttingPlane"
    #include "forceCoeffs"

    calcMeshFactorForLES
    {
        libs        ("libutilityFunctionObjects.so");
        type coded;
        name calculateFactorForLESField;
        codeWrite
        #{
            // get turbulent kinetic energy
            const volScalarField& k  =  mesh().lookupObject<volScalarField>("k");
            // get energy dissipation rate
            const volScalarField& eps  = mesh().lookupObject<volScalarField>("omega");
            //
            auto integralLengthScale = Foam::pow(k, 1.0 / 2.0) / eps / 0.09;
            //
            //Info<<mesh().thisDb()<<endl; //print all objects to the terminal
            const scalarField& volume  = mesh().V(); // Cell volume
            auto myFactor = integralLengthScale / Foam::pow(volume, 1.0 / 3.0);

            volScalarField approxCellSizeForLESFactor
            (
                IOobject
                (
                    "approxCellSizeForLESFactor",
                    time_.timeName(),
                    mesh(),
                    IOobject::NO_READ,
                    IOobject::AUTO_WRITE
                ),
                mesh(),
                dimensionedScalar("approxCellSizeForLESFactor", dimless, scalar(0.0))
            );
            approxCellSizeForLESFactor.primitiveFieldRef() = myFactor;
            approxCellSizeForLESFactor().write();
        #};
    }
}


// ************************************************************************* //
